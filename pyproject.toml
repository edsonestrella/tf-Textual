[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tf-textual"
description = "A beautiful TUI for Terraform - Visualize plans, explore state, and manage infrastructure with style"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
keywords = ["terraform", "tui", "infrastructure", "devops", "cloud"]
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dependencies = [
    "textual>=0.52.0",
    "rich>=13.0.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/your-username/tf-textual"
Documentation = "https://github.com/your-username/tf-textual#readme"
Repository = "https://github.com/your-username/tf-textual"
Issues = "https://github.com/your-username/tf-textual/issues"
Changelog = "https://github.com/your-username/tf-textual/releases"

[project.scripts]
tf-textual = "tf_textual.__main__:main"

[project.entry-points."textual"]
devtools = "tf_textual.devtools:run_devtools"

[tool.hatch.version]
path = "src/tf_textual/__init__.py"

[tool.black]
target-version = ['py38']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  | \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--verbose --color=yes"
filterwarnings = [
    "error",
    "ignore:There is no current event loop:DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\b":,
    "@(abc\\.)?abstractmethod",
]
